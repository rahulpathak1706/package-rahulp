<?php

namespace App\Http\Controllers;

use App\Models\{{modelName}};
use App\Services\{{modelName}}Service;
use Illuminate\Http\Request;

class {{modelName}}Controller extends Controller
{
    /**
     * @var {{modelName}}Service
     */
    protected ${{modelVariable}}Service;

    /**
     * Constructor
     *
     * @param {{modelName}}Service ${{modelVariable}}Service
     */
    public function __construct({{modelName}}Service ${{modelVariable}}Service)
    {
        $this->{{modelVariable}}Service = ${{modelVariable}}Service;
    }

    /**
     * Get paginated list of {{modelVariable}}s
     *
     * @param Request $request Request object containing:
     *                        - search: Optional search string
     *                        - sort_field: Field to sort by
     *                        - sort_order: Sort direction (ASC/DESC)
     *                        - per_page: Items per page
     *                        - page: Current page number
     * @return \Illuminate\Http\JsonResponse
     */
    public function index(Request $request)
    {
        $result = $this->{{modelVariable}}Service->list($request->all());

        return response()->json([
            'success' => true,
            'message' => '{{modelName}}s retrieved successfully',
            'data' => $result
        ]);
    }

    /**
     * Store a newly created {{modelVariable}}
     *
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function store(Request $request)
    {
        $validatedData = $request->validate([
{{validationRules}}
        ]);

        ${{modelVariable}} = $this->{{modelVariable}}Service->create($validatedData);

        return response()->json([
            'success' => true,
            'message' => '{{modelName}} created successfully',
            'data' => ${{modelVariable}}
        ], 201);
    }

    /**
     * Display the specified {{modelVariable}}
     *
     * @param int $id
     * @return \Illuminate\Http\JsonResponse
     */
    public function show($id)
    {
        ${{modelVariable}} = $this->{{modelVariable}}Service->find($id);

        return response()->json([
            'success' => true,
            'message' => '{{modelName}} retrieved successfully',
            'data' => ${{modelVariable}}
        ]);
    }

    /**
     * Update the specified {{modelVariable}}
     *
     * @param Request $request
     * @param int $id
     * @return \Illuminate\Http\JsonResponse
     */
    public function update(Request $request, $id)
    {
        $validatedData = $request->validate([
{{validationUpdateRules}}
        ]);

        ${{modelVariable}} = $this->{{modelVariable}}Service->update($id, $validatedData);

        return response()->json([
            'success' => true,
            'message' => '{{modelName}} updated successfully',
            'data' => ${{modelVariable}}
        ]);
    }

    /**
     * Remove the specified {{modelVariable}}
     *
     * @param int $id
     * @return \Illuminate\Http\JsonResponse
     */
    public function destroy($id)
    {
        $this->{{modelVariable}}Service->delete($id);

        return response()->json([
            'success' => true,
            'message' => '{{modelName}} deleted successfully'
        ], 200);
    }
}
